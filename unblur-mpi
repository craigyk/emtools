#!/home/exacloud/lustre1/users/yoshiokc/sw/cky-tools/site/bin/python

import os
import sh
import sys
import time
import math
import pyfs
import glob

from contextlib import contextmanager

from normalize import normalize

def arguments():
    
    import argparse

    def floatlist(string):
        return tuple(map(float, string.split(',')))

    parser = argparse.ArgumentParser(
        description='runs Niko\'s unblur on a bunch of images using a glob pattern, MPI friendly')
    parser.add_argument('--glob', required=True,
                        help='glob to MRC images')
    parser.add_argument('-a', '--apix', type=float, required=True,
                        help='angstroms per pixel')
    parser.add_argument('-l', '--label', required=True,
                        help='suffix label for unblurred files')
    parser.add_argument('-v', '--kv', default=None, type=float,
                        help='KV of microscope')
    parser.add_argument('-e', '--expf', default=None, type=float,
                        help='electrons per angstrom per frame if dose compensation is desired')
    parser.add_argument('-n', '--norm', default=None,
                        help='path to norm image')
    parser.add_argument('--save-frames', action='store_true',
                        help='save aligned frame stack (will be compressed by gzip)')
    return parser.parse_args()


def bunzip2(srcpath, dstpath):
    if os.system('pbunzip2 -p8 -kc %s > %s' % (srcpath, dstpath)) != 0:
        raise RuntimeError('could not bunzip2 file: %s' % (srcpath))
    return dstpath


def bzip2(srcpath, dstpath):
    os.system('pbzip2 -p8 -kc %s > %s' % (srcpath, dstpath))
    return dstpath


def gzip(srcpath, dstpath):
    if os.system('gzip -nc %s > %s' % (srcpath, dstpath)) != 0:
        raise RuntimeError('could not gzip file: %s' % (srcpath))
    return dstpath


def gunzip(srcpath, dstpath):
    os.system('gunzip -nc %s > %s' % (srcpath, dstpath))
    return dstpath


def mkdtemp():
    import tempfile
    return tempfile.mkdtemp(prefix='unblur')


def resolve(path):
    if path is None:
        return None
    return pyfs.resolve(path)


def unblur(frames_path, pixel_size, kv=None, 
                                    aligned_sum_path=None,
                                    aligned_shifts_path=None,
                                    norm_path=None,
                                    aligned_frc_path=None,
                                    aligned_frames_path=None, 
                                    exposure_per_frame=None,
                                    pre_exposure_dose=0.0, 
                                    bfactor=1500, 
                                    iterations=10, 
                                    max_shift=200.0,
                                    initial_shift=2.0):


    # use full pathnames, because we will be running
    # unblur from a temp directory to prevent race 
    # conditions with the .Unblur temp files it generates

    def loadit(src, dst):
        if src.endswith('.bz2'):
            uprint('decompressing:\n  %s -> %s\n' % (src, dst))
            return bunzip2(src, dst)
        elif src.endswith('.gz'):
            uprint('decompressing:\n  %s -> %s\n' % (src, dst))
            return gunzip(src, dst)
        else:
            uprint('linking:\n  %s -> %s\n' % (src, dst))
            return pyfs.lns(src, dst)

    def saveit(src, dst):
        if src is None or dst is None:
            return None
        try:
            if dst.endswith('.bzip2'):
                uprint('compressing:\n  %s -> %s\n' % (src, dst))
                return bzip2(src, dst)
            elif dst.endswith('.gz'):
                uprint('compressing:\n  %s -> %s\n' % (src, dst))
                return gzip(src, dst)
            else:
                tmppath = dst + '.tmp'
                uprint('saving:\n  %s -> %s\n' % (src, dst))
                pyfs.cp(src, tmppath)
                pyfs.mv(tmppath, dst)
                return dst
        except Exception as e:
            uprint('[error]:', e)

    frames_path = resolve(frames_path)
    aligned_frames_path = resolve(aligned_frames_path)
    aligned_shifts_path = resolve(aligned_shifts_path)
    aligned_sum_path = resolve(aligned_sum_path)
    aligned_frc_path = resolve(aligned_frc_path)

    if pyfs.exists(aligned_sum_path):
        print('  [warning] aligned frames already exist, skipping')
        return 

    def unblurit(tmpdir, frames_path):

        DEFAULT = ''
        YES = 'YES'
        NO = 'NO'
        NULL = '/dev/null'
        EOF = ''

        def tempit(path):
            if path is None:
                return None
            return pyfs.join(tmpdir, path)

        _frames_path = loadit(frames_path, tempit('input.mrc'))
        _aligned_sum_path = tempit('aligned.mrc')
        _aligned_frames_path = tempit('aligned.frames.mrc')
        _aligned_shifts_path = tempit('aligned.shifts')
        _aligned_frc_path = tempit('aligned.frc')   

        if norm_path is not None:
            uprint('normalizing image:\n  %s -> %s\n' % (frames_path, tempit('input.normed.mrc')))
            _frames_path = normalize(_frames_path, norm_path, tempit('input.normed.mrc'))

        input  = []
        input += [_frames_path]
        input += [DEFAULT]                   # default: use all frames
        input += [_aligned_sum_path]
        input += [_aligned_shifts_path]
        input += ['%.3f' % (pixel_size)]
        
        if exposure_per_frame is not None:
            input += [YES] 
            input += ['%.2f' % (exposure_per_frame)]
            if kv is None:
                raise ValueError('need to be given kv param if doing dose compensation')
            input += ['%f' % (kv)]
            input += ['%f' % (pre_exposure_dose)]
        else:
            input += [NO]
        
        if aligned_frames_path is not None:
            input += [YES]
            input += [_aligned_frames_path]
        else:
            input += [NO]
        
        input += [YES]                      # set expert options
        input += [_aligned_frc_path]        # output FRC file
        input += ['%f' % (initial_shift)]   # minimum initial shift resolution
        input += ['%f' % (max_shift)]
        input += ['%f' % (bfactor)]
        input += ['1']                      # half-width of central vertical line in Fourier mask
        input += ['1']                      # half-width of central horizontal line in Fourier mask
        input += ['0.1']                    # termination threshold for shifts (angstroms)
        input += ['%d' % (iterations)]

        if exposure_per_frame is not None:
            input += [YES]                  # restore noise power
        
        input += [NO]                       # verbose output
        input += [EOF]                      # new line to end file
        input = '\n'.join(input)

        uprint('unblurring image:\n  %s\n' % (_frames_path))
        sh.unblur(_in=input, _cwd=tmpdir)

        saveit(_aligned_frc_path, aligned_frc_path)
        saveit(_aligned_sum_path, aligned_sum_path)
        saveit(_aligned_frames_path, aligned_frames_path)
        saveit(_aligned_shifts_path, aligned_shifts_path)
    
    try:
        tmpdir = mkdtemp()
        return unblurit(tmpdir, frames_path)
    except Exception as e:
        #uprint('[error] unblurring image\n', e)
        raise
    finally:
        pyfs.rmtree(tmpdir)


def uprint(*msgs):
    import socket
    msg = '%s ' % (socket.gethostname())
    msg += ' '.join(map(str, msgs))
    sys.stdout.write(msg)
    sys.stdout.flush()


def label_path(path, label):
    path, _ = pyfs.sext(path, full=False)
    return path + label


def htime(secs):
    mins, secs = divmod(secs, 60)
    hours, mins = divmod(mins, 60)
    days, hours = divmod(hours, 24)
    return '%02d:%02d:%02d:%02d' % (days, hours, mins, secs)


def process(paths, args):
    
    n = len(paths)

    for i, path in enumerate(paths):
        start_time = time.time()
        
        aligned_mrc_path = label_path(path, '_%s.mrc' % args.label)
        aligned_shifts_path = label_path(path, '_%s.shifts.txt' % args.label)
        aligned_frames_path = None
        if args.save_frames:
            aligned_frames_path = label_path(path, '_%s.mrcs.gz' % args.label)
        try: 
            unblur(path, args.apix, kv=args.kv,
                           norm_path=args.norm,
                           exposure_per_frame=args.expf,
                           aligned_sum_path=aligned_mrc_path,
                           aligned_frc_path=None,
                           aligned_shifts_path=aligned_shifts_path,
                           aligned_frames_path=aligned_frames_path)
        except Exception as e:
            print('error running unblur on:', path)
        
        elapsed_time = time.time() - start_time
        eta_time = (n-i) * elapsed_time
        uprint('%d of %d done, last: %s, eta: %s\n' % (i, n, htime(elapsed_time), htime(eta_time)))

def joinlist(lists):
    joined = []
    for l in lists:
        joined.extend(l)
    return joined


def splitlist(items, n):
    if len(items) == 0:
        return [[]] * n
    k = int(math.ceil(float(len(items)) / n))
    return [items[x:x+k] for x in range(0, len(items), k)]


if __name__ == '__main__':
    
    args = arguments()

    from mpi4py import MPI
    mpicomm = MPI.COMM_WORLD
    mpirank = mpicomm.Get_rank()
    mpisize = mpicomm.Get_size()
    
    if mpirank == 0:
        images = glob.glob(args.glob)
        olen = len(images)
        uprint('running on %d processes\n' % (mpisize))
        uprint('  there are %d images to process\n' % olen)
        images = [p for p in images if not pyfs.exists(label_path(p, '_%s.mrc' % args.label))]
        uprint('  skipping %d because they are already processed\n' % (olen-len(images)))
        images = splitlist(images, mpisize)
    else:
        images = None

    args = mpicomm.bcast(args, root=0)
    images = mpicomm.scatter(images, root=0)
    uprint('unblurring %d images\n' % (len(images)))
    process(images, args)
    uprint('done with all images!\n')
    images = mpicomm.gather(images, root=0)
    
    if mpirank == 0:
        uprint(type(images), '\n')
        uprint(len(joinlist(images)), '\n')

